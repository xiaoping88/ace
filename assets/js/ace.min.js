/*!
 * Ace v1.3.3
 */
if ("undefined" == typeof jQuery) throw new Error("Ace's JavaScript requires jQuery");


jQuery(function(a) {
	
	jQuery(document).on("click.dropdown.pos", '.dropdown-toggle[data-position="auto"]', function() {
			var b = jQuery(this).offset(),
				c = jQuery(this.parentNode);
			parseInt(b.top + jQuery(this).height()) + 50 > ace.helper.scrollTop() + ace.helper.winHeight() - c.find(".dropdown-menu").eq(0).height() ? c.addClass("dropup") : c.removeClass("dropup")
	});

	jQuery('.ace-nav [class*="icon-animated-"]').closest("a").one("click", function() {
			var b = jQuery(this).find('[class*="icon-animated-"]').eq(0),
				c = b.attr("class").match(/icon\-animated\-([\d\w]+)/);
			b.removeClass(c[0])
	});

	jQuery(document).on("click", ".dropdown-navbar .nav-tabs", function(event) {
		event.stopPropagation(); 
		var c = a(event.target).closest("[data-toggle=tab]");
		if (c.length > 0){
			c.tab("show");
			event.preventDefault();
			jQuery(window).triggerHandler("resize.navbar.dropdown");
		}
	});


	jQuery(".sidebar .nav-list .badge[title],.sidebar .nav-list .badge[title]").each(function() {
		var b = jQuery(this).attr("class").match(/tooltip\-(?:\w+)/);
		b = b ? b[0] : "tooltip-error";
		jQuery(this).tooltip({
			placement: function(b, c) {
				var d = jQuery(c).offset();
				return parseInt(d.left) < parseInt(document.body.scrollWidth / 2) ? "right" : "left"
			},
			container: "body",
			template: '<div class="tooltip ' + b + '"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
		});
	});

	var sb = jQuery(".sidebar");
	jQuery.fn.ace_sidebar && sb.ace_sidebar();

	jQuery.fn.ace_sidebar_scroll && sb.ace_sidebar_scroll({
		include_toggle: !1 || ace.vars.safari || ace.vars.ios_safari
	});

	jQuery.fn.ace_sidebar_hover && sb.ace_sidebar_hover({
		sub_hover_delay: 750,
		sub_scroll_style: "no-track scroll-thin scroll-margin scroll-visible"
	})


	jQuery(document).on(ace.click_event + ".ace.menu", ".menu-toggler", function(b) {
		var c = jQuery(this),
			d = jQuery(c.attr("data-target"));
		if (0 != d.length) {
			b.preventDefault(), d.toggleClass("display"), c.toggleClass("display");
			var e = ace.click_event + ".ace.autohide",
				f = "true" === d.attr("data-auto-hide");
			return c.hasClass("display") ? (f && jQuery(document).on(e, function(b) {
				return d.get(0) == b.target || jQuery.contains(d.get(0), b.target) ? void b.stopPropagation() : (d.removeClass("display"), c.removeClass("display"), void jQuery(document).off(e))
			}), "true" == d.attr("data-sidebar-scroll") && d.ace_sidebar_scroll("reset")) : f && jQuery(document).off(e), !1
		}
	}).on(ace.click_event + ".ace.menu", ".sidebar-collapse", function(b) {
		var c = jQuery(this).attr("data-target"),
			d = null;
		c && (d = jQuery(c)), (null == d || 0 == d.length) && (d = jQuery(this).closest(".sidebar")), 0 != d.length && (b.preventDefault(), d.ace_sidebar("toggleMenu", this))
	}).on(ace.click_event + ".ace.menu", ".sidebar-expand", function(b) {
		var c = jQuery(this).attr("data-target"),
			d = null;
		if (c && (d = jQuery(c)), (null == d || 0 == d.length) && (d = jQuery(this).closest(".sidebar")), 0 != d.length) {
			var e = this;
			b.preventDefault(), d.ace_sidebar("toggleResponsive", this);
			var f = ace.click_event + ".ace.autohide";
			"true" === d.attr("data-auto-hide") && (d.hasClass("responsive-max") ? jQuery(document).on(f, function(b) {
				return d.get(0) == b.target || jQuery.contains(d.get(0), b.target) ? void b.stopPropagation() : (d.ace_sidebar("toggleResponsive", e), void jQuery(document).off(f))
			}) : jQuery(document).off(f))
		}
	});


	// var d = ace.vars.safari && navigator.userAgent.match(/version\/[1-5]/i);

	a(document).on("settings.ace.sidebar_scroll", function(b, c) {
		a(".sidebar[data-sidebar-scroll=true]").each(function() {
			var b = a(this),
				d = b.ace_sidebar_scroll("ref");
			if ("sidebar_collapsed" == c && ace.helper.getComputedStyle(this, "fixed")) "true" == b.attr("data-sidebar-hover") && b.ace_sidebar_hover("reset"), d._reset();
			else if ("sidebar_fixed" === c || "navbar_fixed" === c) {
				var f = d.get("is_scrolling"),
					g = ace.helper.getComputedStyle(this, "fixed");
				d.set("sidebar_fixed", g), g && !f ? d._reset() : g || d.disable();
			}
		})
	});

	a(window).on("resize.ace.sidebar_scroll", function() {
		a(".sidebar[data-sidebar-scroll=true]").each(function() {
			var b = a(this);
			"true" == b.attr("data-sidebar-hover") && b.ace_sidebar_hover("reset");
			var c = a(this).ace_sidebar_scroll("ref"),
				d = e(this, "fixed");
			c.set("sidebar_fixed", d), c._reset()
		})
	});



	if (!ace.vars.very_old_ie) {
		a(window).on("resize.sidebar.ace_hover", function() {
			a(".sidebar[data-sidebar-hover=true]").ace_sidebar_hover("update_vars").ace_sidebar_hover("reset")
		});

		a(document).on("settings.ace.ace_hover", function(b, c) {
			"sidebar_collapsed" == c ? a(".sidebar[data-sidebar-hover=true]").ace_sidebar_hover("reset") : "navbar_fixed" == c && a(".sidebar[data-sidebar-hover=true]").ace_sidebar_hover("update_vars")
		});
	}

	function d() {
		if (a.fn.ace_ajax) {
			window.Pace && (window.paceOptions = {
				ajax: !0,
				document: !0,
				eventLag: !1
			});
			var b = {
				close_active: !0,
				default_url: "page/index",
				content_url: function(a) {
					if (!a.match(/^page\//)) return !1;
					var b = document.location.pathname;
					return b.match(/(\/ajax\/)(index\.html)?/) ? b.replace(/(\/ajax\/)(index\.html)?/, "/ajax/content/" + a.replace(/^page\//, "") + ".html") : b + "?" + a.replace(/\//, "=")
				}
			};
			window.Pace && (b.loading_overlay = "body"), a("[data-ajax-content=true]").ace_ajax(b), a(window).on("error.ace_ajax", function() {
				a("[data-ajax-content=true]").each(function() {
					var b = a(this);
					b.ace_ajax("working") && (window.Pace && Pace.running && Pace.stop(), b.ace_ajax("stopLoading", !0))
				})
			})
		}
	};

	function e() {
		var b = !!a.fn.ace_scroll;
		b && a(".dropdown-content").ace_scroll({
			reset: !1,
			mouseWheelLock: !0
		}), b && !ace.vars.old_ie && (a(window).on("resize.reset_scroll", function() {
			a(".ace-scroll:not(.scroll-disabled)").not(":hidden").ace_scroll("reset")
		}), b && a(document).on("settings.ace.reset_scroll", function(b, c) {
			"sidebar_collapsed" == c && a(".ace-scroll:not(.scroll-disabled)").not(":hidden").ace_scroll("reset")
		}))
	};


	function h() {

	};

	function i() {
		var b = a(".btn-scroll-up");
		if (b.length > 0) {
			var c = !1;
			a(window).on("scroll.scroll_btn", function() {
				var a = ace.helper.scrollTop(),
					d = ace.helper.winHeight(),
					e = document.body.scrollHeight;
				a > parseInt(d / 4) || a > 0 && e >= d && d + a >= e - 1 ? c || (b.addClass("display"), c = !0) : c && (b.removeClass("display"), c = !1)
			}).triggerHandler("scroll.scroll_btn"), b.on(ace.click_event, function() {
				var b = Math.min(500, Math.max(100, parseInt(ace.helper.scrollTop() / 3)));
				return a("html,body").animate({
					scrollTop: 0
				}, b), !1
			})
		}
	};

	function j() {
		if (ace.vars.webkit) {
			var b = a(".ace-nav").get(0);
			b && a(window).on("resize.webkit_fix", function() {
				ace.helper.redraw(b)
			})
		}
		ace.vars.ios_safari && a(document).on("ace.settings.ios_fix", function(b, c, d) {
			"navbar_fixed" == c && (a(document).off("focus.ios_fix blur.ios_fix", "input,textarea,.wysiwyg-editor"), 1 == d && a(document).on("focus.ios_fix", "input,textarea,.wysiwyg-editor", function() {
				a(window).on("scroll.ios_fix", function() {
					var b = a("#navbar").get(0);
					b && ace.helper.redraw(b)
				})
			}).on("blur.ios_fix", "input,textarea,.wysiwyg-editor", function() {
				a(window).off("scroll.ios_fix")
			}))
		}).triggerHandler("ace.settings.ios_fix", ["navbar_fixed", "fixed" == a("#navbar").css("position")])
	};

	function k() {
		a(document).on("hide.bs.collapse show.bs.collapse", function(b) {
			var c = b.target.getAttribute("id"),
				d = a('a[href*="#' + c + '"]');
			0 == d.length && (d = a('a[data-target*="#' + c + '"]')), 0 != d.length && d.find(ace.vars[".icon"]).each(function() {
				var c, d = a(this),
					e = null,
					f = null;
				return (e = d.attr("data-icon-show")) ? f = d.attr("data-icon-hide") : (c = d.attr("class").match(/fa\-(.*)\-(up|down)/)) && (e = "fa-" + c[1] + "-down", f = "fa-" + c[1] + "-up"), e ? ("show" == b.type ? d.removeClass(e).addClass(f) : d.removeClass(f).addClass(e), !1) : void 0
			})
		})
	};

	function l() {
		function b() {
			var b = a(this).find("> .dropdown-menu");
			if ("fixed" == b.css("position")) {
				var d = parseInt(a(window).width()),
					e = d > 320 ? 60 : d > 240 ? 40 : 30,
					f = parseInt(d) - e,
					g = parseInt(a(window).height()) - 30,
					h = parseInt(Math.min(f, 320));
				b.css("width", h);
				var i = !1,
					j = 0,
					k = b.find(".tab-pane.active .dropdown-content.ace-scroll");
				0 == k.length ? k = b.find(".dropdown-content.ace-scroll") : i = !0;
				var l = k.closest(".dropdown-menu"),
					m = b[0].scrollHeight;
				if (1 == k.length) {
					var n = k.find(".scroll-content")[0];
					n && (m = n.scrollHeight), j += l.find(".dropdown-header").outerHeight(), j += l.find(".dropdown-footer").outerHeight();
					var o = l.closest(".tab-content");
					0 != o.length && (j += o.siblings(".nav-tabs").eq(0).height())
				}
				var p = parseInt(Math.min(g, 480, m + j)),
					q = parseInt(Math.abs((f + e - h) / 2)),
					r = parseInt(Math.abs((g + 30 - p) / 2)),
					s = parseInt(b.css("z-index")) || 0;
				if (b.css({
					height: p,
					left: q,
					right: "auto",
					top: r - (i ? 3 : 1)
				}), 1 == k.length && (ace.vars.touch ? k.ace_scroll("disable").css("max-height", p - j).addClass("overflow-scroll") : k.ace_scroll("update", {
					size: p - j
				}).ace_scroll("enable").ace_scroll("reset")), b.css("height", p + (i ? 7 : 2)), b.hasClass("user-menu")) {
					b.css("height", "");
					var t = a(this).find(".user-info");
					t.css(1 == t.length && "fixed" == t.css("position") ? {
						left: q,
						right: "auto",
						top: r,
						width: h - 2,
						"max-width": h - 2,
						"z-index": s + 1
					} : {
						left: "",
						right: "",
						top: "",
						width: "",
						"max-width": "",
						"z-index": ""
					})
				}
				a(this).closest(".navbar.navbar-fixed-top").css("z-index", s)
			} else 0 != b.length && c.call(this, b);
			var u = this;
			a(window).off("resize.navbar.dropdown").one("resize.navbar.dropdown", function() {
				a(u).triggerHandler("shown.bs.dropdown.navbar")
			})
		}

		function c(b) {
			if (b = b || a(this).find("> .dropdown-menu"), b.length > 0 && (b.css({
				width: "",
				height: "",
				left: "",
				right: "",
				top: ""
			}).find(".dropdown-content").each(function() {
				ace.vars.touch && a(this).css("max-height", "").removeClass("overflow-scroll");
				var b = parseInt(a(this).attr("data-size") || 0) || a.fn.ace_scroll.defaults.size;
				a(this).ace_scroll("update", {
					size: b
				}).ace_scroll("enable").ace_scroll("reset")
			}), b.hasClass("user-menu"))) {
				a(this).find(".user-info").css({
					left: "",
					right: "",
					top: "",
					width: "",
					"max-width": "",
					"z-index": ""
				})
			}
			a(this).closest(".navbar").css("z-index", "")
		}
		ace.vars.old_ie || a(".ace-nav > li").on("shown.bs.dropdown.navbar", function() {
			b.call(this)
		}).on("hidden.bs.dropdown.navbar", function() {
			a(window).off("resize.navbar.dropdown"), c.call(this)
		})
	};

	d(), e(),  h(), i(), j(), k(), l();
});


(function(a, b) {
	if (ace.vars.touch) {
		var c = "touchstart MSPointerDown pointerdown",
			d = "touchend touchcancel MSPointerUp MSPointerCancel pointerup pointercancel",
			e = "touchmove MSPointerMove MSPointerHover pointermove";
		a.event.special.ace_drag = {
			setup: function() {
				var f = 0,
					g = a(this);
				g.on(c, function(c) {
					function h(a) {
						if (k) {
							var b = a.originalEvent.touches ? a.originalEvent.touches[0] : a;
							if (i = {
								coords: [b.pageX, b.pageY]
							}, k && i && (m = 0, n = 0, l = Math.abs(n = k.coords[1] - i.coords[1]) > f && Math.abs(m = k.coords[0] - i.coords[0]) <= Math.abs(n) ? n > 0 ? "up" : "down" : Math.abs(m = k.coords[0] - i.coords[0]) > f && Math.abs(n) <= Math.abs(m) ? m > 0 ? "left" : "right" : !1, l !== !1)) {
								var c = {
									cancel: !1
								};
								k.origin.trigger({
									type: "ace_drag",
									direction: l,
									dx: m,
									dy: n,
									retval: c
								}), 0 == c.cancel && a.preventDefault()
							}
							k.coords[0] = i.coords[0], k.coords[1] = i.coords[1]
						}
					}
					var i, j = c.originalEvent.touches ? c.originalEvent.touches[0] : c,
						k = {
							coords: [j.pageX, j.pageY],
							origin: a(c.target)
						},
						l = !1,
						m = 0,
						n = 0;
					g.on(e, h).one(d, function() {
						g.off(e, h), k = i = b
					})
				})
			}
		}
	}
}(window.jQuery));


//widget
(function(a, b) {
	function c(b, c) {
		var d = b.find(".widget-main").eq(0);
		a(window).off("resize.widget.scroll");
		var e = ace.vars.old_ie || ace.vars.touch;
		if (c) {
			var f = d.data("ace_scroll");
			f && d.data("save_scroll", {
				size: f.size,
				lock: f.lock,
				lock_anyway: f.lock_anyway
			});
			var g = b.height() - b.find(".widget-header").height() - 10;
			g = parseInt(g), d.css("min-height", g), e ? (f && d.ace_scroll("disable"), d.css("max-height", g).addClass("overflow-scroll")) : (f ? d.ace_scroll("update", {
				size: g,
				mouseWheelLock: !0,
				lockAnyway: !0
			}) : d.ace_scroll({
				size: g,
				mouseWheelLock: !0,
				lockAnyway: !0
			}), d.ace_scroll("enable").ace_scroll("reset")), a(window).on("resize.widget.scroll", function() {
				var a = b.height() - b.find(".widget-header").height() - 10;
				a = parseInt(a), d.css("min-height", a), e ? d.css("max-height", a).addClass("overflow-scroll") : d.ace_scroll("update", {
					size: a
				}).ace_scroll("reset")
			})
		} else {
			d.css("min-height", "");
			var h = d.data("save_scroll");
			h && d.ace_scroll("update", {
				size: h.size,
				mouseWheelLock: h.lock,
				lockAnyway: h.lock_anyway
			}).ace_scroll("enable").ace_scroll("reset"), e ? d.css("max-height", "").removeClass("overflow-scroll") : h || d.ace_scroll("disable")
		}
	}
	var d = function(b) {
		this.$box = a(b);
		this.reload = function() {
			var a = this.$box,
				b = !1;
			"static" == a.css("position") && (b = !0, a.addClass("position-relative")), a.append('<div class="widget-box-overlay"><i class="' + ace.vars.icon + 'loading-icon fa fa-spinner fa-spin fa-2x white"></i></div>'), a.one("reloaded.ace.widget", function() {
				a.find(".widget-box-overlay").remove(), b && a.removeClass("position-relative")
			})
		}, this.close = function() {
			var a = this.$box,
				b = 300;
			a.fadeOut(b, function() {
				a.trigger("closed.ace.widget"), a.remove()
			})
		}, this.toggle = function(a, b) {
			var c = this.$box,
				d = c.find(".widget-body").eq(0),
				e = null,
				f = "undefined" != typeof a ? a : c.hasClass("collapsed") ? "show" : "hide",
				g = "show" == f ? "shown" : "hidden";
			if ("undefined" == typeof b && (b = c.find("> .widget-header a[data-action=collapse]").eq(0), 0 == b.length && (b = null)), b) {
				e = b.find(ace.vars[".icon"]).eq(0);
				var h, i = null,
					j = null;
				(i = e.attr("data-icon-show")) ? j = e.attr("data-icon-hide") : (h = e.attr("class").match(/fa\-(.*)\-(up|down)/)) && (i = "fa-" + h[1] + "-down", j = "fa-" + h[1] + "-up")
			}
			var k = 250,
				l = 200;
			"show" == f ? (e && e.removeClass(i).addClass(j), d.hide(), c.removeClass("collapsed"), d.slideDown(k, function() {
				c.trigger(g + ".ace.widget")
			})) : (e && e.removeClass(j).addClass(i), d.slideUp(l, function() {
				c.addClass("collapsed"), c.trigger(g + ".ace.widget")
			}))
		}, this.hide = function() {
			this.toggle("hide")
		}, this.show = function() {
			this.toggle("show")
		}, this.fullscreen = function() {
			var a = this.$box.find("> .widget-header a[data-action=fullscreen]").find(ace.vars[".icon"]).eq(0),
				b = null,
				d = null;
			(b = a.attr("data-icon1")) ? d = a.attr("data-icon2") : (b = "fa-expand", d = "fa-compress"), this.$box.hasClass("fullscreen") ? (a.addClass(b).removeClass(d), this.$box.removeClass("fullscreen"), c(this.$box, !1)) : (a.removeClass(b).addClass(d), this.$box.addClass("fullscreen"), c(this.$box, !0)), this.$box.trigger("fullscreened.ace.widget")
		}
	};

	a.fn.widget_box = function(c, e) {
		var f, g = this.each(function() {
			var b = a(this),
				g = b.data("widget_box"),
				h = "object" == typeof c && c;
			g || b.data("widget_box", g = new d(this, h)), "string" == typeof c && (f = g[c](e))
		});
		return f === b ? g : f
	};

	a(document).on("click.ace.widget", ".widget-header a[data-action]", function(b) {
		b.preventDefault();
		var c = a(this),
			e = c.closest(".widget-box");
		if (0 != e.length && !e.hasClass("ui-sortable-helper")) {
			var f = e.data("widget_box");
			f || e.data("widget_box", f = new d(e.get(0)));
			var g = c.data("action");
			if ("collapse" == g) {
				var h, i = e.hasClass("collapsed") ? "show" : "hide";
				if (e.trigger(h = a.Event(i + ".ace.widget")), h.isDefaultPrevented()) return;
				f.toggle(i, c)
			} else if ("close" == g) {
				var h;
				if (e.trigger(h = a.Event("close.ace.widget")), h.isDefaultPrevented()) return;
				f.close()
			} else if ("reload" == g) {
				c.blur();
				var h;
				if (e.trigger(h = a.Event("reload.ace.widget")), h.isDefaultPrevented()) return;
				f.reload()
			} else if ("fullscreen" == g) {
				var h;
				if (e.trigger(h = a.Event("fullscreen.ace.widget")), h.isDefaultPrevented()) return;
				f.fullscreen()
			} else "settings" == g && e.trigger("setting.ace.widget")
		}
	})
}(window.jQuery));

//settings btn
(function(a) {
	a("#ace-settings-btn").on(ace.click_event, function(b) {
		b.preventDefault(), a(this).toggleClass("open"), a("#ace-settings-box").toggleClass("open")
	}), a("#ace-settings-navbar").on("click", function() {
		ace.settings.navbar_fixed(null, this.checked)
	}).each(function() {
		this.checked = ace.settings.is("navbar", "fixed")
	}), a("#ace-settings-sidebar").on("click", function() {
		ace.settings.sidebar_fixed(null, this.checked)
	}).each(function() {
		this.checked = ace.settings.is("sidebar", "fixed")
	}), a("#ace-settings-breadcrumbs").on("click", function() {
		ace.settings.breadcrumbs_fixed(null, this.checked)
	}).each(function() {
		this.checked = ace.settings.is("breadcrumbs", "fixed")
	}), a("#ace-settings-add-container").on("click", function() {
		ace.settings.main_container_fixed(null, this.checked)
	}).each(function() {
		this.checked = ace.settings.is("main-container", "fixed")
	}), a("#ace-settings-compact").on("click", function() {
		if (this.checked) {
			a("#sidebar").addClass("compact");
			var b = a("#ace-settings-hover");
			b.length > 0 && b.removeAttr("checked").trigger("click")
		} else a("#sidebar").removeClass("compact"), a("#sidebar[data-sidebar-scroll=true]").ace_sidebar_scroll("reset");
		ace.vars.old_ie && ace.helper.redraw(a("#sidebar")[0], !0)
	}), a("#ace-settings-highlight").on("click", function() {
		this.checked ? a("#sidebar .nav-list > li").addClass("highlight") : a("#sidebar .nav-list > li").removeClass("highlight"), ace.vars.old_ie && ace.helper.redraw(a("#sidebar")[0])
	}), a("#ace-settings-hover").on("click", function() {
		if (!a("#sidebar").hasClass("h-sidebar")) {
			if (this.checked) a("#sidebar li").addClass("hover").filter(".open").removeClass("open").find("> .submenu").css("display", "none");
			else {
				a("#sidebar li.hover").removeClass("hover");
				var b = a("#ace-settings-compact");
				b.length > 0 && b.get(0).checked && b.trigger("click")
			}
			a(".sidebar[data-sidebar-hover=true]").ace_sidebar_hover("reset"), a(".sidebar[data-sidebar-scroll=true]").ace_sidebar_scroll("reset"), ace.vars.old_ie && ace.helper.redraw(a("#sidebar")[0])
		}
	})
}(jQuery));


//settings-rtl
(function(a) {
	a("#ace-settings-rtl").removeAttr("checked").on("click", function() {
		b()
	});
	var b = function() {
		function b(b) {
			function c(a, b) {
				e.find("." + a).removeClass(a).addClass("tmp-rtl-" + a).end().find("." + b).removeClass(b).addClass(a).end().find(".tmp-rtl-" + a).removeClass("tmp-rtl-" + a).addClass(b)
			}
			var d = a(document.body);
			b || d.toggleClass("rtl"), b = b || document.body;
			var e = a(b);
			e.find(".dropdown-menu:not(.datepicker-dropdown,.colorpicker)").toggleClass("dropdown-menu-right").end().find(".pull-right:not(.dropdown-menu,blockquote,.profile-skills .pull-right)").removeClass("pull-right").addClass("tmp-rtl-pull-right").end().find(".pull-left:not(.dropdown-submenu,.profile-skills .pull-left)").removeClass("pull-left").addClass("pull-right").end().find(".tmp-rtl-pull-right").removeClass("tmp-rtl-pull-right").addClass("pull-left").end().find(".chosen-select").toggleClass("chosen-rtl").next().toggleClass("chosen-rtl"), c("align-left", "align-right"), c("no-padding-left", "no-padding-right"), c("arrowed", "arrowed-right"), c("arrowed-in", "arrowed-in-right"), c("tabs-left", "tabs-right"), c("messagebar-item-left", "messagebar-item-right"), a(".modal.aside-vc").ace_aside("flip").ace_aside("insideContainer"), e.find(".fa").each(function() {
				if (!(this.className.match(/ui-icon/) || a(this).closest(".fc-button").length > 0))
					for (var b = this.attributes.length, c = 0; b > c; c++) {
						var d = this.attributes[c].value;
						d.match(/fa\-(?:[\w\-]+)\-left/) ? this.attributes[c].value = d.replace(/fa\-([\w\-]+)\-(left)/i, "fa-$1-right") : d.match(/fa\-(?:[\w\-]+)\-right/) && (this.attributes[c].value = d.replace(/fa\-([\w\-]+)\-(right)/i, "fa-$1-left"))
					}
			});
			var f = d.hasClass("rtl");
			f ? (e.find(".scroll-hz").addClass("make-ltr").find(".scroll-content").wrapInner('<div class="make-rtl" />'), a(".sidebar[data-sidebar-hover=true]").ace_sidebar_hover("changeDir", "right")) : (e.find(".scroll-hz").removeClass("make-ltr").find(".make-rtl").children().unwrap(), a(".sidebar[data-sidebar-hover=true]").ace_sidebar_hover("changeDir", "left")), a.fn.ace_scroll && e.find(".scroll-hz").ace_scroll("reset");
			try {
				var g = a("#piechart-placeholder");
				if (g.length > 0) {
					var h = d.hasClass("rtl") ? "nw" : "ne";
					g.data("draw").call(g.get(0), g, g.data("chart"), h)
				}
			} catch (i) {}
			ace.helper.redraw(b, !0)
		}
		if (0 == a("#ace-rtl-stylesheet").length) {
			var c = a("head").find("link.ace-main-stylesheet");
			0 == c.length && (c = a("head").find('link[href*="/ace.min.css"],link[href*="/ace-part2.min.css"]'), 0 == c.length && (c = a("head").find('link[href*="/ace.css"],link[href*="/ace-part2.css"]')));
			var d = a("head").find("link#ace-skins-stylesheet"),
				e = c.first().attr("href").replace(/(\.min)?\.css$/i, "-rtl$1.css");
			a.ajax({
				url: e
			}).done(function() {
				var a = jQuery("<link />", {
					type: "text/css",
					rel: "stylesheet",
					id: "ace-rtl-stylesheet"
				});
				d.length > 0 ? a.insertAfter(d) : c.length > 0 ? a.insertAfter(c.last()) : a.appendTo("head"), a.attr("href", e), b(), window.Pace && Pace.running && Pace.stop()
			})
		} else b();
		a(".page-content-area[data-ajax-content=true]").on("ajaxscriptsloaded.rtl", function() {
			a("body").hasClass("rtl") && b(this)
		})
	}
}(jQuery));

//skin-colorpicker
(function(a) {
	try {
		a("#skin-colorpicker").ace_colorpicker({
			auto_pos: !1
		})
	} catch (b) {}
	a("#skin-colorpicker").on("change", function() {
		function b(b) {
			var c = a(document.body);
			c.removeClass("no-skin skin-1 skin-2 skin-3"), c.addClass(b), ace.data.set("skin", b);
			var d = ["red", "blue", "green", ""];
			a(".ace-nav > li.grey").removeClass("dark"), a(".ace-nav > li").removeClass("no-border margin-1"), a(".ace-nav > li:not(:last-child)").removeClass("light-pink").find("> a > " + ace.vars[".icon"]).removeClass("pink").end().eq(0).find(".badge").removeClass("badge-warning"), a(".sidebar-shortcuts .btn").removeClass("btn-pink btn-white").find(ace.vars[".icon"]).removeClass("white"), a(".ace-nav > li.grey").removeClass("red").find(".badge").removeClass("badge-yellow"), a(".sidebar-shortcuts .btn").removeClass("btn-primary btn-white");
			var e = 0;
			a(".sidebar-shortcuts .btn").each(function() {
				a(this).find(ace.vars[".icon"]).removeClass(d[e++])
			});
			var f = ["btn-success", "btn-info", "btn-warning", "btn-danger"];
			if ("no-skin" == b) {
				var e = 0;
				a(".sidebar-shortcuts .btn").each(function() {
					a(this).attr("class", "btn " + f[e++ % 4])
				}), a(".sidebar[data-sidebar-scroll=true]").ace_sidebar_scroll("updateStyle", ""), a(".sidebar[data-sidebar-hover=true]").ace_sidebar_hover("updateStyle", "no-track scroll-thin")
			} else if ("skin-1" == b) {
				a(".ace-nav > li.grey").addClass("dark");
				var e = 0;
				a(".sidebar-shortcuts").find(".btn").each(function() {
					a(this).attr("class", "btn " + f[e++ % 4])
				}), a(".sidebar[data-sidebar-scroll=true]").ace_sidebar_scroll("updateStyle", "scroll-white no-track"), a(".sidebar[data-sidebar-hover=true]").ace_sidebar_hover("updateStyle", "no-track scroll-thin scroll-white")
			} else if ("skin-2" == b) a(".ace-nav > li").addClass("no-border margin-1"), a(".ace-nav > li:not(:last-child)").addClass("light-pink").find("> a > " + ace.vars[".icon"]).addClass("pink").end().eq(0).find(".badge").addClass("badge-warning"), a(".sidebar-shortcuts .btn").attr("class", "btn btn-white btn-pink").find(ace.vars[".icon"]).addClass("white"), a(".sidebar[data-sidebar-scroll=true]").ace_sidebar_scroll("updateStyle", "scroll-white no-track"), a(".sidebar[data-sidebar-hover=true]").ace_sidebar_hover("updateStyle", "no-track scroll-thin scroll-white");
			else if ("skin-3" == b) {
				c.addClass("no-skin"), a(".ace-nav > li.grey").addClass("red").find(".badge").addClass("badge-yellow");
				var e = 0;
				a(".sidebar-shortcuts .btn").each(function() {
					a(this).attr("class", "btn btn-primary btn-white"), a(this).find(ace.vars[".icon"]).addClass(d[e++])
				}), a(".sidebar[data-sidebar-scroll=true]").ace_sidebar_scroll("updateStyle", "scroll-dark no-track"), a(".sidebar[data-sidebar-hover=true]").ace_sidebar_hover("updateStyle", "no-track scroll-thin")
			}
			a(".sidebar[data-sidebar-scroll=true]").ace_sidebar_scroll("reset"), ace.vars.old_ie && ace.helper.redraw(document.body, !0)
		}
		var c = a(this).find("option:selected").data("skin");
		if (0 == a("#ace-skins-stylesheet").length) {
			var d = a("head").find("link.ace-main-stylesheet");
			0 == d.length && (d = a("head").find('link[href*="/ace.min.css"],link[href*="/ace-part2.min.css"]'), 0 == d.length && (d = a("head").find('link[href*="/ace.css"],link[href*="/ace-part2.css"]')));
			var e = d.first().attr("href").replace(/(\.min)?\.css$/i, "-skins$1.css");
			a.ajax({
				url: e
			}).done(function() {
				var a = jQuery("<link />", {
					type: "text/css",
					rel: "stylesheet",
					id: "ace-skins-stylesheet"
				});
				d.length > 0 ? a.insertAfter(d.last()) : a.appendTo("head"), a.attr("href", e), b(c), window.Pace && Pace.running && Pace.stop()
			})
		} else b(c)
	})
}(jQuery));

//widget
(function(a) {
	a(document).on("reload.ace.widget", ".widget-box", function() {
		var b = a(this);
		setTimeout(function() {
			b.trigger("reloaded.ace.widget")
		}, parseInt(1e3 * Math.random() + 1e3))
	})
}(window.jQuery));

//bs_typeahead
(function(a) {
	ace.vars.US_STATES = ["Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Dakota", "North Carolina", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"];
	try {
		a("#nav-search-input").bs_typeahead({
			source: ace.vars.US_STATES,
			updater: function(b) {
				return a("#nav-search-input").focus(), b
			}
		})
	} catch (b) {}
}(window.jQuery));